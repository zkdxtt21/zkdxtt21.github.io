I",<h2 id="oc-内存管理的基本概念">OC 内存管理的基本概念</h2>

<p>###1. 内存管理的基本概念</p>

<ul>
  <li>
    <p>栈区 stack</p>
  </li>
  <li>
    <p>堆区 heap</p>

    <p>heap（堆）是最自由的一种内存，它完全由程序来负责内存的管理，包括什么时候申请，什么时候释放，而且对它的使用也没有什么大小的限制。在C/C++中，用alloc系统函数和new申请的内存都存在于heap段中。</p>
  </li>
  <li>
    <p>BSS区</p>

    <p>来存放没有被初始化或初始化为0的全局变量，因为是全局变量，所以在程序运行的整个生命周期内都存在于内存中。有趣的是这个段中的变量只占用程序运行时的内存空间，而不占用程序文件的储存空间。</p>
  </li>
  <li>
    <p>数据区 Data</p>

    <p>初始化过的全局变量数据段，该段用来保存初始化了的非0的全局变量，如果全局变量初始化为0，则编译有时会出于优化的考虑，将其放在bss段中。因为也是全局变量，所以在程序运行的整个生命周期内都存在于内存中。与bss段不同的是，data段中的变量既占程序运行时的内存空间，也占程序文件的储存空间。</p>
  </li>
  <li>
    <p>代码区 text</p>
  </li>
</ul>

<h3 id="2-oc内存管理的范围">2. OC内存管理的范围</h3>

<p><code class="language-plaintext highlighter-rouge">堆区</code> 中 继承 <code class="language-plaintext highlighter-rouge">NSObject </code> 的 <code class="language-plaintext highlighter-rouge">对象</code></p>

<h2 id="内存管理的原理及分类">内存管理的原理及分类</h2>

<ul>
  <li>
    <p><strong>引用计数</strong></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">ARC</code> or <code class="language-plaintext highlighter-rouge">MRC</code></p>
  </li>
</ul>

<h2 id="mrc快速入门">MRC快速入门</h2>

<ul>
  <li>
    <p>+1</p>

    <p>alloc new copy</p>
  </li>
  <li>
    <p>-1</p>

    <p>release autorelease</p>
  </li>
</ul>

<h2 id="内存管理原则">内存管理原则</h2>

<ul>
  <li>
    <p>原则</p>

    <p>对象有人使用，不回收</p>

    <p>使用对象，+1</p>

    <p>不使用对象 -1</p>
  </li>
  <li>
    <p>谁创建， 谁release</p>
  </li>
  <li>谁retain， 谁release</li>
  <li>
    <p>总结</p>

    <p>+1 就该-1</p>
  </li>
</ul>

<p>内存管理的研究内容：</p>

<ol>
  <li>
    <p>野指针</p>

    <ol>
      <li>定义的指针没有初始化（没有指向）</li>
      <li>指向的空间已经被释放 （僵尸对象）</li>
    </ol>
  </li>
  <li>
    <p>内存泄漏</p>

    <p>栈区指针变量已经被释放，而堆区的空间还没有被释放</p>
  </li>
</ol>

<h2 id="单个对象的内存管理野指针">单个对象的内存管理（野指针）</h2>

<p>###僵尸对象
已经被释放的对象，在内存中可能还能继续访问，但容易出</p>

<p>开启僵尸对象检测：</p>

<p><img src="https://ww3.sinaimg.cn/large/006tKfTcgy1fbul3381n8j30pu0eyq4w.jpg" width="800" /></p>

<h3 id="避免使用僵尸对象">避免使用僵尸对象</h3>

<p>对象释放后，将 <code class="language-plaintext highlighter-rouge">指针</code> -&gt; <code class="language-plaintext highlighter-rouge">nil</code></p>

<h3 id="带个对象的内存泄漏">带个对象的内存泄漏</h3>

<p>⚠️ 注意 相互持有 、自己调用自己 的情况</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[self mothd:self]；
</code></pre></div></div>

:ET